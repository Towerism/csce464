#+TITLE:HW7
#+AUTHOR:Martin Fracker
#+LATEX_HEADER: \usepackage[margin=1in]{geometry}
1) Rather than displaying umpteen tables, I explain how we get the resulting
   routing tables in the tables below (Tables
   [[tab:a-init]]-[[tab:d-new]]).
2) Ack packets will not be subjected to the same congestion that data packets
   may be exposed to making it less likely that the sender will timeout for a
   particular data packet.
3) Faster recovery due to relatively shorter RTT on wireless link $BD$. Overall,
   higher throughput since the slow link is shortened from S-B-D to just B-D,
   such that S-B is now a highspeed reliable link.
4) 
   1) [1,6], [23,26] slow start
   2) [6,16], [17,22] avoidance
   3) The cwd is cut in half which indicates a triple dupack.
   4) sstresh is initialized to its maximum value, in this example it looks like
      that maximum value is 32 segments
   5) 21 (in otherwords half of what the cwnd was before the triple dupack)
   6) 13 (in otherwords half of what the cwnd was before the timeout)
   7) The first 63 segments are sent during the first 6 transmission rounds. In
      the 7th transmission round 33 more segments will be transmitted, one of
      them being the 70th segment.
   8) cwnd will be set to 4, and ssthresh will save the old cwnd, 8.
5) An advantage is not having to go through the process of slow start once
   again. A disadvantage is that the wireless link may have changed in quality
   increasing the likelihood of massive congestion. To get around this, set the
   cwnd to 1 and save the old cwnd in sstresh. After the transmission round, increase
   the cwnd to half of the old cwnd. After the transmission round, increase to
   75% of the old cwnd. After the transmission round, increase to 87.5% of the
   old cwnd. Assuming that the link did not change in quality, increasing the
   cwnd back to 100% of the old cwnd in the next round should be fine. This
   solves the problem of normal slow start taking too long, but doesn't
   immediately jump back up to the old cwnd in case the quality of link went down.

#+CAPTION: Initial table for A.
#+NAME: tab:a-init
| Destination | next-hop | cost |
|-------------+----------+------|
| A           | *        |  0   |
| B           | B        |  4   |
| C           | D        |  6   |
| D           | D        |  4   |
| E           | D        |  10  |

#+CAPTION: Initial table for D
#+NAME: tab:d-init
| Destination | next-hop | cost |
|-------------+----------+------|
| A           | A        |  4   |
| B           | C        |  4   |
| C           | C        |  2   |
| D           | *        |  0   |
| E           | C        |  6   |

#+CAPTION: Table for A after receiving the distance vector sent by D. The route to B is broken. The routes to C and E all went through D originally. So the corresponding costs in the distance vector are added to the original cost to D to get the cost in the new table.
#+NAME: tab:a-new
| Destination | next-hop | cost |
|-------------+----------+------|
| A           | *        |  0   |
| B           | -        |  -   |
| C           | D        |  9   |
| D           | D        |  4   |
| E           | D        |  11  |

#+CAPTION: Table for D after receiving the distance vectory sent by A. The route to B is broken. Routes C and E do not go through A, so to determine if they should we compare the old cost to the cost of the route to A plus the corresponding cost in the distance vectory sent by A. If the old cost is bigger, then the new cost is used and the next-hop is set to A. Now A has a cost of 4 at node D. The costs from node A to node C and E advertised in the distance vector sent by A are 3 and 5 respectively. Adding to them 4, we get 7 and 9 which are both larger than the old costs of C and E, so those will not change as a result of the reception of the distance vector sent by A.
#+NAME: tab:d-new
| Destination | next-hop | cost |
|-------------+----------+------|
| A           | A        |  4   |
| B           | -        |  -   |
| C           | C        |  2   |
| D           | *        |  0   |
| E           | C        |  6   |
