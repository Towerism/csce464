/*
 * GloMoSim is COPYRIGHTED software.  Release 2.02 of GloMoSim is available
 * at no cost to educational users only.
 *
 * Commercial use of this software requires a separate license.  No cost,
 * evaluation licenses are available for such purposes; please contact
 * info@scalable-networks.com
 *
 * By obtaining copies of this and any other files that comprise GloMoSim2.02,
 * you, the Licensee, agree to abide by the following conditions and
 * understandings with respect to the copyrighted software:
 *
 * 1.Permission to use, copy, and modify this software and its documentation
 *   for education and non-commercial research purposes only is hereby granted
 *   to Licensee, provided that the copyright notice, the original author's
 *   names and unit identification, and this permission notice appear on all
 *   such copies, and that no charge be made for such copies. Any entity
 *   desiring permission to use this software for any commercial or
 *   non-educational research purposes should contact:
 *
 *   Professor Rajive Bagrodia
 *   University of California, Los Angeles
 *   Department of Computer Science
 *   Box 951596
 *   3532 Boelter Hall
 *   Los Angeles, CA 90095-1596
 *   rajive@cs.ucla.edu
 *
 * 2.NO REPRESENTATIONS ARE MADE ABOUT THE SUITABILITY OF THE SOFTWARE FOR ANY
 *   PURPOSE. IT IS PROVIDED "AS IS" WITHOUT EXPRESS OR IMPLIED WARRANTY.
 *
 * 3.Neither the software developers, the Parallel Computing Lab, UCLA, or any
 *   affiliate of the UC system shall be liable for any damages suffered by
 *   Licensee from the use of this software.
 */

// Use the latest version of Parsec if this line causes a compiler error.
/*
 * $Id: pathloss_two_ray.pc,v 1.4 2001/02/15 02:57:57 mineo Exp $
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <assert.h>

#include "api.h"
#include "structmsg.h"
#include "fileio.h"
#include "message.h"
#include "pathloss_two_ray.h"

/* boxmuller.c           Implements the Polar form of the Box-Muller
                         Transformation

                      (c) Copyright 1994, Everett F. Carter Jr.
                          Permission is granted by the author to use
			  this software for any application provided this
			  copyright notice is preserved.

*/

#include <math.h>
#include <stdlib.h>


//extern float ranf();         /* ranf() is uniform in 0..1 */


float box_muller(float m, float s)	/* normal random variate generator */
{				        /* mean m, standard deviation s */
	float x1, x2, w, y1;
	static float y2;
	static int use_last = 0;
        int seed = 1000;
	if (use_last)		        /* use value from previous call */
	{
		y1 = y2;
		use_last = 0;
	}
	else
	{
		do {
			x1 = 2.0 * (rand()*1.0/RAND_MAX) - 1.0;
			x2 = 2.0 * (rand()*1.0/RAND_MAX) - 1.0;
			w = x1 * x1 + x2 * x2;
		} while ( w >= 1.0 );

		w = sqrt( (-2.0 * log( w ) ) / w );
		y1 = x1 * w;
		y2 = x2 * w;
		use_last = 1;
	}

	return( m + y1 * s );
}

void PathlossTwoRayInit(GlomoProp *propData,
                        const GlomoNodeInput *nodeInput)
{
    propData->pathlossVar = NULL;
}

double PathlossTwoRay(double distance,
                      double waveLength,
                      float txAntennaGain,
                      float txAntennaHeight,
                      float rxAntennaGain,
                      float rxAntennaHeight)
{
    double pathloss = -(txAntennaGain + rxAntennaGain);
    double valueForPlaneEarthLoss;
    double valueForFreeSpaceLoss;

    valueForPlaneEarthLoss = distance * distance / (txAntennaHeight * rxAntennaHeight);
    valueForFreeSpaceLoss = 4.0 * PI * distance / waveLength;

    if (valueForPlaneEarthLoss > valueForFreeSpaceLoss) {
        if (valueForPlaneEarthLoss > 1.0) {
            pathloss += 22.0 * log10(valueForPlaneEarthLoss) + box_muller(0, 0);
        }
    } else {
        if (valueForFreeSpaceLoss > 1.0) {
            pathloss += 22.0 * log10(valueForFreeSpaceLoss) + box_muller(0, 0);
        }
    }

    return pathloss;
}

